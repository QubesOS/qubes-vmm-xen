From 68c97aee47d8d0a8db80ede59536ed1b29e96c86 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Wed, 16 Nov 2022 02:38:06 +0100
Subject: [PATCH 1/2] patch-gvt-hvmloader.patch

This patches based on Intel XenGT preview, XCP-NG Project.
---
 tools/firmware/hvmloader/config.h  |  2 +-
 tools/firmware/hvmloader/pci.c     | 40 ++++++++++++++++++++++++++++--
 tools/firmware/hvmloader/rombios.c |  1 +
 tools/firmware/hvmloader/vgt.h     | 24 ++++++++++++++++++
 4 files changed, 64 insertions(+), 3 deletions(-)
 create mode 100644 tools/firmware/hvmloader/vgt.h

diff --git a/tools/firmware/hvmloader/config.h b/tools/firmware/hvmloader/config.h
index e029a60adb..bda0c20bf7 100644
--- a/tools/firmware/hvmloader/config.h
+++ b/tools/firmware/hvmloader/config.h
@@ -4,7 +4,7 @@
 #include <stdint.h>
 #include <stdbool.h>
 
-enum virtual_vga { VGA_none, VGA_std, VGA_cirrus, VGA_pt };
+enum virtual_vga { VGA_none, VGA_std, VGA_cirrus, VGA_pt, VGA_vgt };
 extern enum virtual_vga virtual_vga;
 
 extern unsigned long igd_opregion_pgbase;
diff --git a/tools/firmware/hvmloader/pci.c b/tools/firmware/hvmloader/pci.c
index b2319b6cc8..211840e837 100644
--- a/tools/firmware/hvmloader/pci.c
+++ b/tools/firmware/hvmloader/pci.c
@@ -23,6 +23,7 @@
 #include "hypercall.h"
 #include "config.h"
 #include "pci_regs.h"
+#include "vgt.h"
 
 #include <xen/memory.h>
 #include <xen/hvm/ioreq.h>
@@ -89,12 +90,16 @@ static int find_next_rmrr(uint32_t base)
 
 static void class_specific_pci_device_setup(uint16_t vendor_id,
                                             uint16_t device_id,
-                                            uint8_t bus, uint8_t devfn)
+                                            uint8_t bus, uint8_t devfn,
+                                            uint8_t *intel_gpu_present)
 {
     uint16_t class;
 
     class = pci_readw(devfn, PCI_CLASS_DEVICE);
 
+    if (( vendor_id == 0x8086 ) && (class == 0x0300 || class == 0x0380))
+        *intel_gpu_present = 1;
+
     switch ( class )
     {
     case 0x0300:
@@ -173,6 +178,7 @@ void pci_setup(void)
     unsigned int bar, pin, link, isa_irq;
     int is_running_on_q35 = 0;
     uint8_t pci_devfn_decode_type[256] = {};
+    uint8_t intel_gpu_present = 0;
 
     /* Resources assignable to PCI devices via BARs. */
     struct resource {
@@ -268,7 +274,7 @@ void pci_setup(void)
             continue;
 
         class_specific_pci_device_setup(vendor_id, device_id,
-                                        0 /* virt_bus support TBD */, devfn);
+                                        0 /* virt_bus support TBD */, devfn, &intel_gpu_present);
 
         /*
          * It is recommended that BAR programming be done whilst decode
@@ -660,6 +666,36 @@ void pci_setup(void)
 
     if ( vga_devfn != 256 )
     {
+        if ( intel_gpu_present )
+        {
+            uint32_t bar = pci_readl(vga_devfn, PCI_BASE_ADDRESS_0)
+                                        & PCI_BASE_ADDRESS_MEM_MASK;
+
+            void *pvinfo = (void *)bar + VGT_PVINFO_PAGE;
+            uint64_t *magic = pvinfo;
+
+            if (*magic == VGT_MAGIC) {
+		uint32_t vga_bar = pci_readl(vga_devfn, PCI_BASE_ADDRESS_5)
+						& PCI_BASE_ADDRESS_MEM_MASK;
+                /*
+                 * Found VGT device, and use standard VGA bios.
+                 */
+                virtual_vga = VGA_vgt;
+
+                /* XXX: we use this hack to tell vGT driver the
+                 * top of <4G mem, so vGT can avoid unnecessary
+                 * attempts to map the mem hole. This optimization
+                 * can speed up guest bootup time and improve Win7
+                 * SMP guest's stability.
+                 * NOTE: here we're actually trying to write 32 bits
+                 * into VENDOR_ID and DEVICE_ID -- we assume normally
+                 * sane codes in guest won't do this...
+                 */
+                 pci_writel(vga_devfn, PCI_VENDOR_ID, hvm_info->low_mem_pgend);
+		 /* XXX: Let QEMU legacy VGA emulator know the vga bar address*/
+                 pci_writel(0, 0xf8, vga_bar);
+            }
+        }
         /*
          * VGA registers live in I/O space so ensure that primary VGA
          * has IO enabled, even if there is no I/O BAR on that
diff --git a/tools/firmware/hvmloader/rombios.c b/tools/firmware/hvmloader/rombios.c
index 46f331e465..ba33c0a5ca 100644
--- a/tools/firmware/hvmloader/rombios.c
+++ b/tools/firmware/hvmloader/rombios.c
@@ -78,6 +78,7 @@ static void rombios_load_roms(void)
                vgabios_cirrusvga, sizeof(vgabios_cirrusvga));
         vgabios_sz = round_option_rom(sizeof(vgabios_cirrusvga));
         break;
+    case VGA_vgt:
     case VGA_std:
         printf("Loading Standard VGABIOS ...\n");
         memcpy((void *)VGABIOS_PHYSICAL_ADDRESS,
diff --git a/tools/firmware/hvmloader/vgt.h b/tools/firmware/hvmloader/vgt.h
new file mode 100644
index 0000000000..f5b3f34753
--- /dev/null
+++ b/tools/firmware/hvmloader/vgt.h
@@ -0,0 +1,24 @@
+/*
+ * Copyright (c) 2012-2013, Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef _VGT_DEVTABLE_H
+#define _VGT_DEVTABLE_H
+
+#define VGT_PVINFO_PAGE 	0x78000
+#define VGT_MAGIC		0x4776544776544776    /* 'vGTvGTvG' */
+
+#endif  /* _VGT_DEVTABLE_H */
-- 
2.49.0

