From 0480b882d6b56c020a57d6f05d6ae30924775274 Mon Sep 17 00:00:00 2001
From: Sergii Dmytruk <sergii.dmytruk@3mdeb.com>
Date: Thu, 21 Mar 2024 19:35:10 +0200
Subject: [PATCH 1325/1328] x86/boot: introduce slaunch_slrt global variable

It holds physical address of SLRT. The value is produced by
slaunch_early (known as txt_early previously), gets set in assembly and
then used by the main C code which don't need to know how we got
it (which is different for different CPUs).

This change additionally renames txt_early.c into slaunch_early.c

Signed-off-by: Sergii Dmytruk <sergii.dmytruk@3mdeb.com>
---
 xen/arch/x86/boot/Makefile                    |  2 +-
 xen/arch/x86/boot/head.S                      | 32 +++++++++++++------
 .../x86/boot/{txt_early.c => slaunch_early.c} | 19 ++++++++---
 xen/arch/x86/include/asm/intel_txt.h          |  8 -----
 xen/arch/x86/include/asm/slaunch.h            |  1 +
 xen/arch/x86/intel_txt.c                      |  4 +--
 xen/arch/x86/slaunch.c                        |  9 +++---
 xen/arch/x86/tpm.c                            | 12 ++++---
 8 files changed, 52 insertions(+), 35 deletions(-)
 rename xen/arch/x86/boot/{txt_early.c => slaunch_early.c} (91%)

diff --git a/xen/arch/x86/boot/Makefile b/xen/arch/x86/boot/Makefile
index 913fa9d2c6..e1cb421ad3 100644
--- a/xen/arch/x86/boot/Makefile
+++ b/xen/arch/x86/boot/Makefile
@@ -1,6 +1,6 @@
 obj-bin-y += head.o
 
-head-bin-objs := cmdline.o reloc.o txt_early.o tpm_early.o
+head-bin-objs := cmdline.o reloc.o slaunch_early.o tpm_early.o
 
 nocov-y   += $(head-bin-objs)
 noubsan-y += $(head-bin-objs)
diff --git a/xen/arch/x86/boot/head.S b/xen/arch/x86/boot/head.S
index 7ea50f0098..4efe47e85a 100644
--- a/xen/arch/x86/boot/head.S
+++ b/xen/arch/x86/boot/head.S
@@ -527,21 +527,33 @@ __start:
         jmp     trampoline_bios_setup
 
 .Lslaunch_proto:
+        /* Upon reaching here, CPU state mostly matches the one setup by the
+         * bootloader with ESP, ESI and EDX being clobbered above. */
+
         /* Save information that TrenchBoot slaunch was used. */
         movb    $1, sym_esi(slaunch_active)
 
-        /* Push arguments to stack and call txt_early_tests(). */
+        /* Prepare space for output parameter of slaunch_early_tests(), which is
+         * a structure of two uint32_t fields. */
+        sub     $8, %esp
+
+        /* Push arguments to stack and call slaunch_early_tests(). */
+        push    %esp                        /* pointer to output structure */
         push    $sym_offs(__2M_rwdata_end)  /* end of target image */
         push    $sym_offs(_start)           /* target base address */
         push    %esi                        /* load base address */
-        call    txt_early_tests
+        call    slaunch_early_tests
 
-        /*
-         * txt_early_tests() returns MBI address, pass it to tpm_extend_mbi()
-         * and store for later in EBX.
-         */
-        push    %eax
-        movl    %eax,%ebx
+        /* Move outputs of slaunch_early_tests() from stack into registers. */
+        pop     %ebx  /* physical MBI address */
+        pop     %edx  /* physical SLRT address */
+
+        /* Save physical address of SLRT for C code. */
+        mov     %edx, sym_esi(slaunch_slrt)
+
+        /* Push arguments to stack and call tpm_extend_mbi(). */
+        push    %edx  /* SLRT address because early code has no slaunch_slrt */
+        push    %ebx  /* MBI address */
         call    tpm_extend_mbi
 
         /* Move magic number expected by Multiboot 2 to EAX and fall through. */
@@ -878,8 +890,8 @@ reloc:
         .incbin "reloc.bin"
 
         ALIGN
-txt_early_tests:
-        .incbin "txt_early.bin"
+slaunch_early_tests:
+        .incbin "slaunch_early.bin"
 
         ALIGN
 tpm_extend_mbi:
diff --git a/xen/arch/x86/boot/txt_early.c b/xen/arch/x86/boot/slaunch_early.c
similarity index 91%
rename from xen/arch/x86/boot/txt_early.c
rename to xen/arch/x86/boot/slaunch_early.c
index 23ee734c47..3edf40778a 100644
--- a/xen/arch/x86/boot/txt_early.c
+++ b/xen/arch/x86/boot/slaunch_early.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022-2023 3mdeb Sp. z o.o. All rights reserved.
+ * Copyright (c) 2022-2024 3mdeb Sp. z o.o. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -23,11 +23,18 @@ asm (
     "    .text                         \n"
     "    .globl _start                 \n"
     "_start:                           \n"
-    "    jmp  txt_early_tests          \n"
+    "    jmp  slaunch_early_tests      \n"
     );
 
 #include "defs.h"
 #include "../include/asm/intel_txt.h"
+#include "../include/asm/slaunch.h"
+
+struct early_tests_results
+{
+    uint32_t mbi_pa;
+    uint32_t slrt_pa;
+} __packed;
 
 static void verify_pmr_ranges(struct txt_os_mle_data *os_mle,
                               struct txt_os_sinit_data *os_sinit,
@@ -105,9 +112,10 @@ static void verify_pmr_ranges(struct txt_os_mle_data *os_mle,
     */
 }
 
-uint32_t __stdcall txt_early_tests(uint32_t load_base_addr,
+void __stdcall slaunch_early_tests(uint32_t load_base_addr,
                                    uint32_t tgt_base_addr,
-                                   uint32_t tgt_end_addr)
+                                   uint32_t tgt_end_addr,
+                                   struct early_tests_results *result)
 {
     void *txt_heap;
     struct txt_os_mle_data *os_mle;
@@ -128,5 +136,6 @@ uint32_t __stdcall txt_early_tests(uint32_t load_base_addr,
 
     verify_pmr_ranges(os_mle, os_sinit, load_base_addr, tgt_base_addr, size);
 
-    return os_mle->boot_params_addr;
+    result->mbi_pa = os_mle->boot_params_addr;
+    result->slrt_pa = os_mle->slrt;
 }
diff --git a/xen/arch/x86/include/asm/intel_txt.h b/xen/arch/x86/include/asm/intel_txt.h
index 112f670816..e6c6a06be1 100644
--- a/xen/arch/x86/include/asm/intel_txt.h
+++ b/xen/arch/x86/include/asm/intel_txt.h
@@ -329,14 +329,6 @@ static inline int is_in_pmr(struct txt_os_sinit_data *os_sinit, uint64_t base,
     return 0;
 }
 
-/* Returns physical address. */
-static inline uint32_t txt_find_slrt(void)
-{
-    struct txt_os_mle_data *os_mle =
-        txt_os_mle_data_start(_txt(read_txt_reg(TXTCR_HEAP_BASE)));
-    return os_mle->slrt;
-}
-
 extern void map_txt_mem_regions(void);
 extern void protect_txt_mem_regions(void);
 extern void txt_restore_mtrrs(bool e820_verbose);
diff --git a/xen/arch/x86/include/asm/slaunch.h b/xen/arch/x86/include/asm/slaunch.h
index 03c686061a..70101bb5d6 100644
--- a/xen/arch/x86/include/asm/slaunch.h
+++ b/xen/arch/x86/include/asm/slaunch.h
@@ -18,6 +18,7 @@
 #define DLE_EVTYPE_SLAUNCH_END     (TXT_EVTYPE_BASE + 0x104)
 
 extern bool slaunch_active;
+extern uint32_t slaunch_slrt; /* physical address */
 
 /* evt_log is a physical address and the caller must map it to virtual, if
  * needed. */
diff --git a/xen/arch/x86/intel_txt.c b/xen/arch/x86/intel_txt.c
index 36fda89cf2..c3471dfe1f 100644
--- a/xen/arch/x86/intel_txt.c
+++ b/xen/arch/x86/intel_txt.c
@@ -29,7 +29,7 @@ void __init map_txt_mem_regions(void)
 
     map_l2(txt_heap_base, txt_heap_size);
 
-    find_evt_log(__va(txt_find_slrt()), &evt_log_addr, &evt_log_size);
+    find_evt_log(__va(slaunch_slrt), &evt_log_addr, &evt_log_size);
     map_l2((unsigned long)evt_log_addr, evt_log_size);
     if ( evt_log_addr != NULL )
         map_l2((unsigned long)evt_log_addr, evt_log_size);
@@ -53,7 +53,7 @@ void __init protect_txt_mem_regions(void)
     BUG_ON(rc == 0);
 
     /* TXT TPM Event Log */
-    find_evt_log(__va(txt_find_slrt()), &evt_log_addr, &evt_log_size);
+    find_evt_log(__va(slaunch_slrt), &evt_log_addr, &evt_log_size);
     if ( evt_log_addr != NULL ) {
         printk("SLAUNCH: reserving event log (%#lx - %#lx)\n",
                (uint64_t)evt_log_addr,
diff --git a/xen/arch/x86/slaunch.c b/xen/arch/x86/slaunch.c
index 07500ee8db..cfb53a0eb5 100644
--- a/xen/arch/x86/slaunch.c
+++ b/xen/arch/x86/slaunch.c
@@ -1,5 +1,4 @@
 #include <xen/types.h>
-#include <asm/intel_txt.h>
 #include <asm/page.h>
 #include <asm/processor.h>
 #include <asm/slaunch.h>
@@ -9,6 +8,7 @@
 #include <xen/multiboot.h>
 
 bool __initdata slaunch_active;
+uint32_t __initdata slaunch_slrt;
 
 static void __maybe_unused compile_time_checks(void)
 {
@@ -37,10 +37,9 @@ int __init map_l2(unsigned long paddr, unsigned long size)
 
 static struct slr_table *slr_get_table(void)
 {
-    uint32_t slrt_pa = txt_find_slrt();
-    struct slr_table *slrt = __va(slrt_pa);
+    struct slr_table *slrt = __va(slaunch_slrt);
 
-    map_l2(slrt_pa, PAGE_SIZE);
+    map_l2(slaunch_slrt, PAGE_SIZE);
 
     if ( slrt->magic != SLR_TABLE_MAGIC )
         panic("SLRT has invalid magic value: %#08x!\n", slrt->magic);
@@ -55,7 +54,7 @@ static struct slr_table *slr_get_table(void)
               slrt->size, slrt->max_size);
 
     if ( slrt->size > PAGE_SIZE )
-        map_l2(slrt_pa, slrt->size);
+        map_l2(slaunch_slrt, slrt->size);
 
     return slrt;
 }
diff --git a/xen/arch/x86/tpm.c b/xen/arch/x86/tpm.c
index b075dafaf2..f05f1bc37b 100644
--- a/xen/arch/x86/tpm.c
+++ b/xen/arch/x86/tpm.c
@@ -36,6 +36,8 @@ asm (
 #endif
 #define __va(x)     _p(x)
 
+uint32_t slaunch_slrt;
+
 /*
  * The code is being compiled as a standalone binary without linking to any
  * other part of Xen.  Providing implementation of builtin functions in this
@@ -936,9 +938,7 @@ void tpm_hash_extend(unsigned loc, unsigned pcr, uint8_t *buf, unsigned size,
     void *evt_log_addr;
     uint32_t evt_log_size;
 
-    struct slr_table *slrt = __va(txt_find_slrt());
-
-    find_evt_log(slrt, &evt_log_addr, &evt_log_size);
+    find_evt_log(__va(slaunch_slrt), &evt_log_addr, &evt_log_size);
     evt_log_addr = __va(evt_log_addr);
 
     if ( is_tpm12() ) {
@@ -976,8 +976,12 @@ void tpm_hash_extend(unsigned loc, unsigned pcr, uint8_t *buf, unsigned size,
 }
 
 #ifdef __EARLY_TPM__
-void __stdcall tpm_extend_mbi(uint32_t *mbi)
+void __stdcall tpm_extend_mbi(uint32_t *mbi, uint32_t slrt_pa)
 {
+    /* Early TPM code isn't linked with the rest but still needs to have this
+     * variable with correct value. */
+    slaunch_slrt = slrt_pa;
+
     /* MBI starts with uint32_t total_size. */
     tpm_hash_extend(DRTM_LOC, DRTM_DATA_PCR, (uint8_t *)mbi, *mbi,
                     DLE_EVTYPE_SLAUNCH, NULL, 0);
-- 
2.46.0

