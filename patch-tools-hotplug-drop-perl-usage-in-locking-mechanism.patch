From d51ed59f5187b7124eed29a0932147bc83509654 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Wed, 31 Oct 2018 00:20:14 +0100
Subject: [PATCH] tools/hotplug: drop perl usage in locking mechanism

Use plain flock on open FD. This makes the locking mechanism not
tolerate removing the lock file once created. This also means the
hotplug scripts need to manually close the FD before spawning
long-running processes; or don't do that at all.
Fortunately, none of the hotplug scripts in Qubes spawns long-running
processes.

Signed-off-by: Marek Marczykowski-GÃ³recki <marmarek@invisiblethingslab.com>
---
 tools/hotplug/Linux/locking.sh | 52 +++++++---------------------------
 1 file changed, 11 insertions(+), 41 deletions(-)

diff --git a/tools/hotplug/Linux/locking.sh b/tools/hotplug/Linux/locking.sh
index c6a7e96ff9..a7d0252f56 100644
--- a/tools/hotplug/Linux/locking.sh
+++ b/tools/hotplug/Linux/locking.sh
@@ -38,37 +38,18 @@ claim_lock()
     mkdir -p "$LOCK_BASEDIR"
     _setlockfd $1
     # The locking strategy is identical to that from with-lock-ex(1)
-    # from chiark-utils, except using flock.  It has the benefit of
-    # it being possible to safely remove the lockfile when done.
+    # from chiark-utils, except using flock. 
     # See below for a correctness proof.
-    local rightfile
-    while true; do
-        eval "exec $_lockfd<>$_lockfile"
-        flock -x $_lockfd || return $?
-        # We can't just stat /dev/stdin or /proc/self/fd/$_lockfd or
-        # use bash's test -ef because those all go through what is
-        # actually a synthetic symlink in /proc and we aren't
-        # guaranteed that our stat(2) won't lose the race with an
-        # rm(1) between reading the synthetic link and traversing the
-        # file system to find the inum.  Perl is very fast so use that.
-        rightfile=$( perl -e '
-            open STDIN, "<&'$_lockfd'" or die $!;
-            my $fd_inum = (stat STDIN)[1]; die $! unless defined $fd_inum;
-            my $file_inum = (stat $ARGV[0])[1];
-            print "y\n" if $fd_inum eq $file_inum;
-                             ' "$_lockfile" )
-        if [ x$rightfile = xy ]; then break; fi
-	# Some versions of bash appear to be buggy if the same
-	# $_lockfile is opened repeatedly. Close the current fd here.
-        eval "exec $_lockfd<&-"
-    done
+    eval "exec $_lockfd<>$_lockfile"
+    flock -x $_lockfd || return $?
 }
 
 
 release_lock()
 {
     _setlockfd $1
-    rm "$_lockfile"
+    # do _not_ remove the lock file, that would introduce race condition!
+    eval "exec $_lockfd<&-"
 }
 
 # Protocol and correctness proof:
@@ -86,7 +67,7 @@ release_lock()
 #     - and that inum is currently linked at the lockfile path
 #
 # * The rules are:
-#     - No-one but a lockholder may unlink the lockfile path
+#     - No-one may unlink the lockfile path
 #       (or otherwise cause it to stop referring to a file it
 #       refers to).
 #     - Anyone may open the lockfile with O_CREAT
@@ -94,9 +75,6 @@ release_lock()
 # * The protocol for locking is:
 #     - Open the file (O_CREAT)
 #     - flock it
-#     - fstat the fd you have open
-#     - stat the lockfile path
-#     - if both are equal you have the lock, otherwise try again.
 #
 # * Informal proof of exclusivity:
 #     - No two open-files can hold an fcntl lock onto the same file
@@ -107,25 +85,17 @@ release_lock()
 #     - After you call flock successfully no-one other than you
 #       (someone with the same open-file) can stop you having
 #       that flock lock.
-#     - Obviously the inum you get from the fstat is fixed
-#     - At the point where you call stat there are two
-#       possibilities:
-#         (i) the lockfile path referred to some other inum
-#             in which case you have failed
-#         (ii) the lockfile path referred to the same file
-#             in which case at that point you were the
-#             lockholder (by definition).
+#     - Since no-one may unlink the lockfile path, the lockfile path refer
+#       always to the same inum
 #
 # * Informal proof that no-one else can steal the lock:
 #     - After you call flock successfully no-one other than you
 #       can stop you having that flock lock
-#     - No-one other than the lockholder is permitted to stop
-#       the path referring to a particular inum.  So if you
-#       hold the lock then only you are allowed to stop the
-#       path referring to the file whose flock you hold; so
+#     - No-one is permitted to stop
+#       the path referring to a particular inum; so
 #       it will continue to refer to that file.
 #   That's both the conditions for being the lockholder.
 #
 #   Thus once you hold the lock at any instant, you will
 #   continue to do so until you voluntarily stop doing so
-#   (eg by unlinking the lockfile or closing the fd).
+#   (eg by closing the fd).
-- 
2.17.2

