diff --git a/xen/arch/x86/tsx.c b/xen/arch/x86/tsx.c
index be89741a2f6d..10fa613969cf 100644
--- a/xen/arch/x86/tsx.c
+++ b/xen/arch/x86/tsx.c
@@ -18,7 +18,7 @@
  * This option only has any effect on systems presenting a mechanism of
  * controlling TSX behaviour, and where TSX isn't force-disabled by firmware.
  */
-int8_t __read_mostly opt_tsx = -1;
+int8_t __read_mostly opt_tsx = -2;
 bool __read_mostly rtm_disabled;
 
 static int __init parse_tsx(const char *s)
@@ -198,6 +198,13 @@ void tsx_init(void)
     }
 
     /*
+     * Check bottom bit only.  Higher bits are various sentinels.  Performed
+     * unconditionally so tsx=0 hides guest CPUID bits on HSX/BDX even without
+     * MSRs to enforce the restriction.
+     */
+    rtm_disabled = !(opt_tsx & 1);
+
+    /*
      * Note: MSR_TSX_CTRL is enumerated on TSX-enabled MDS_NO and later parts.
      * MSR_TSX_FORCE_ABORT is enumerated on TSX-enabled pre-MDS_NO Skylake
      * parts only.  The two features are on a disjoint set of CPUs, and not
@@ -222,9 +229,6 @@ void tsx_init(void)
 
         rdmsr(MSR_TSX_CTRL, lo, hi);
 
-        /* Check bottom bit only.  Higher bits are various sentinels. */
-        rtm_disabled = !(opt_tsx & 1);
-
         lo &= ~(TSX_CTRL_RTM_DISABLE | TSX_CTRL_CPUID_CLEAR);
         if ( rtm_disabled )
             lo |= TSX_CTRL_RTM_DISABLE | TSX_CTRL_CPUID_CLEAR;
@@ -241,9 +245,6 @@ void tsx_init(void)
 
         rdmsr(MSR_TSX_FORCE_ABORT, lo, hi);
 
-        /* Check bottom bit only.  Higher bits are various sentinels. */
-        rtm_disabled = !(opt_tsx & 1);
-
         lo &= ~(TSX_FORCE_ABORT_RTM | TSX_CPUID_CLEAR | TSX_ENABLE_RTM);
 
         if ( cpu_has_rtm_always_abort )
